diff --git a/aligner_result.cpp b/aligner_result.cpp
index e072c2b..2f26ee9 100644
--- a/aligner_result.cpp
+++ b/aligner_result.cpp
@@ -1264,7 +1264,7 @@ bool AlnFlags::printYF(BTString& o, bool first) const {
 	else if(!nfilt_  ) flag = "NS";
 	else if(!scfilt_ ) flag = "SC";
 	else if(!qcfilt_ ) flag = "QC";
-	if(flag > 0) {
+	if(flag != 0) {
 		if(!first) o.append('\t');
 		o.append("YF:Z:");
 		o.append(flag);
diff --git a/processor_support.h b/processor_support.h
index f68ee65..012d17b 100644
--- a/processor_support.h
+++ b/processor_support.h
@@ -34,7 +34,7 @@ public:
     // from: Intel® 64 and IA-32 Architectures Software Developer’s Manual, 325462-036US,March 2013
     //Before an application attempts to use the POPCNT instruction, it must check that the
     //processor supports SSE4.2
-    //“(if CPUID.01H:ECX.SSE4_2[bit 20] = 1) and POPCNT (if CPUID.01H:ECX.POPCNT[bit 23] = 1)”
+    //"(if CPUID.01H:ECX.SSE4_2[bit 20] = 1) and POPCNT (if CPUID.01H:ECX.POPCNT[bit 23] = 1)"
     //
     // see p.272 of http://download.intel.com/products/processor/manual/253667.pdf available at
     // http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html
@@ -49,7 +49,7 @@ public:
 #elif defined(USING_GCC_COMPILER)
         __get_cpuid(0x1, &regs.EAX, &regs.EBX, &regs.ECX, &regs.EDX);
 #else
-        std::cerr << “ERROR: please define __cpuid() for this build.\n”; 
+        std::cerr << "ERROR: please define __cpuid() for this build.\n"; 
         assert(0);
 #endif
         if( !( (regs.ECX & BIT(20)) && (regs.ECX & BIT(23)) ) ) return false;
